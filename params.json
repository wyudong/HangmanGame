{"name":"HangmanGame","tagline":"Strikingly Interview Project","body":"# HangmanGame\r\n\r\nHi! Welcome to this page for introducing and archiving my Strikingly interview project - a word-guessing game on iOS.\r\n\r\n## Walkthrough\r\n\r\nMy project is base on the MVC design pattern.\r\n\r\n### Model\r\n\r\n- `RESTfulAPIManager` interacts with the HTTP connection and implements all the given APIs in five Objective-C methods with completion handlers.\r\n\r\n- `HMString` is a subclass of `NSString`, which reads each character of a word and replace it with other characters.\r\n\r\n- `HMGameMangaer` has jut one shared instance telling the program if player wants to start a new game or continue the last saved game.\r\n\r\n### View\r\n\r\nI define my category or subclass of [FlatUIKit](https://github.com/Grouper/FlatUIKit) and [MBProgressHUD](https://github.com/jdg/MBProgressHUD) to customize my UI components, such as labels, buttons, text field and progress HUD.\r\n\r\n### Controller\r\n\r\n- HMWelcomeViewController has three parts.\r\n    - Enter your player ID in the text field.\r\n    - Touch **NEW GAMGE** button to start a new game, and this will clear all the saved data.\r\n    - Touch **CONTINUE** button to continue your last game.\r\n\r\n- HMGuessViewController is for guessing the word and getting the result.\r\n    - Submit your guessing letter with the customized keyboard.\r\n    - Check the progress of your guess and some other stats after every guess.\r\n    - Quit the game or submit you score.\r\n\r\n## Difficulties that I encountered and how do I resolve them\r\n\r\n### HTTP request\r\n\r\nBefore the task, I haven't never write program to request data via HTTP. The only library I used to deal with the network when developing iOS App is [LeanCloud](https://leancloud.cn/). However, I just know a little about LeanCloud's APIs, not anything in lower level.\r\n\r\nSo the first thing I do is to learn what is RESTful web service and how to send request and receive JSON package. I read an [article](http://www.drdobbs.com/web-development/restful-web-services-a-tutorial/240169069?pgno=1) and try to send request using both the terminal and an Chrome extension named [ApplicationAdvanced REST client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/reviews?hl=en-US&utm_source=ARC). An hour later, I finally understand the whole game flow and the HTTP request and response.\r\n\r\n### Customized keyboard\r\n\r\nI want to impress people when playing my game and the default keyboard of iOS looks dull and some keys are redundant for guessing a word. So I decide to design a customized keyboard.\r\n\r\nI really have little time to learn [Custom Keyboard of App Extension](https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/Keyboard.html) provided by Apple, so the dirty method is to simulate a keyboard with tons of `UIButton`. Another thing to make me headache is how to auto layout theses buttons. At last, I make it works and it could be worse :)\r\n\r\n## Highlights\r\n\r\n- Can I play the game without a player ID or what if I want to continue the game with a different playID? The answer is NO. But I have prepared some nice tips for you in those cases. Find more funny tips like you find my bugs.\r\n\r\n- Every time you make a guess, the word will shake its body to cheer you up.\r\n\r\n- The keyboard, obviously the one in the guess view. Not cool enough?\r\n\r\n- The App name: H_ngm_n. Wait, is it an English word?\r\n\r\n- Simple but elegant UI with the help of [FlatUIKit](https://github.com/Grouper/FlatUIKit).\r\n\r\n## Big thanks\r\n\r\nThank you very much for giving me such a special interview opportunity. I will never forget the intense but meaningful development time lasted 4 days. Hope you enjoy my work as I do. For more fun, please try another iOS game made by me, [7 Light Year](https://itunes.apple.com/us/app/7-light-year/id1025658330?mt=8).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}